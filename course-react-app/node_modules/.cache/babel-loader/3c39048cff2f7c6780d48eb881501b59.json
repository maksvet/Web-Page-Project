{"ast":null,"code":"var _jsxFileName = \"/Users/MakSim/FS1030CourseProject/course-react-app/src/Contact.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Contact = props => {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [content, setContent] = useState(\"\"); //const [password] = \"somepassword\" // I left password for the API to be functional\n\n  const formSubmit = async event => {\n    event.preventDefault();\n    const response = await fetch('http://localhost:3008/contact_form/entries', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        phone,\n        content\n      })\n    });\n    const payload = await response.json();\n\n    if (response.status >= 400) {\n      alert(`Oops! Error: ${payload.message} for fields: ${payload.invalid.join(\",\")}`);\n    } else {\n      setName(\"\"); //clearing the input fields on submit\n\n      setEmail(\"\");\n      setPhone(\"\");\n      setContent(\"\");\n      alert(`Your message successfully submitted`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"name\",\n      name: \"name\",\n      placeholder: \"Your name...\",\n      required: true,\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"email\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      id: \"email\",\n      name: \"email\",\n      placeholder: \"Your email...\",\n      required: true,\n      value: email,\n      onChange: e => setEmail(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"phoneNumber\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"phone\",\n      id: \"phone\",\n      name: \"phone\",\n      placeholder: \"Your phone number...\",\n      required: true,\n      value: phone,\n      onChange: e => setPhone(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      id: \"message\",\n      name: \"message\",\n      placeholder: \"Your message...\",\n      required: true,\n      value: content,\n      onChange: e => setContent(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"submit\",\n      value: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Contact, \"lLup99kxPuGk0pFarvWe6WGpc0E=\");\n\n_c = Contact;\nexport default Contact;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"sources":["/Users/MakSim/FS1030CourseProject/course-react-app/src/Contact.js"],"names":["React","useState","Contact","props","name","setName","email","setEmail","phone","setPhone","content","setContent","formSubmit","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","payload","json","status","alert","message","invalid","join","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\n  const Contact = (props) => {\n  const [name, setName] = useState(\"\")\n  const [email, setEmail] = useState(\"\")\n  const [phone, setPhone] = useState(\"\")\n  const [content, setContent] = useState(\"\")\n  //const [password] = \"somepassword\" // I left password for the API to be functional\n  const formSubmit = async event => {\n    event.preventDefault()\n    const response = await fetch('http://localhost:3008/contact_form/entries', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n              },\n            body: JSON.stringify({name, email, phone, content})\n        })\n        const payload = await response.json()\n        if (response.status >= 400) {\n          alert(`Oops! Error: ${payload.message} for fields: ${payload.invalid.join(\",\")}`)\n        } else {\n            setName(\"\")//clearing the input fields on submit\n            setEmail(\"\")\n            setPhone(\"\")\n            setContent(\"\")\n            alert(`Your message successfully submitted`)\n        }\n        \n  }\n\n\n    return(\n      <form onSubmit={formSubmit}>\n      <label htmlFor=\"name\"></label>\n      <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Your name...\" required value={name} onChange={e => setName(e.target.value)}/>\n  \n      <label htmlFor=\"email\"></label>\n      <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Your email...\" required value={email} onChange={e => setEmail(e.target.value)}/>\n\n      <label htmlFor=\"phoneNumber\"></label>\n      <input type=\"phone\" id=\"phone\" name=\"phone\" placeholder=\"Your phone number...\" required value={phone} onChange={e => setPhone(e.target.value)}/>\n\n      <label htmlFor=\"message\"></label>\n      <textarea id=\"message\" name=\"message\" placeholder=\"Your message...\" required value={content} onChange={e => setContent(e.target.value)}></textarea>\n    <input type=\"submit\" value=\"Submit\"/>\n    </form>\n   )\n    \n  \n}\n \nexport default Contact;"]},"metadata":{},"sourceType":"module"}